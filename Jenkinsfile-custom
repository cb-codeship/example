library '_github_com_pipeline-templates-apps_pipeline-library' _
def mavenPod = libraryResource 'podtemplates/podTemplate-maven.yaml'
def kanikoPod = libraryResource 'podtemplates/podTemplate-kaniko.yaml'
def testScript = libraryResource 'scripts/script.sh'
//def MVN_SETTINGS = libraryResource 'maven-conf/settings.xml'
def MVN_COMMAND_PACKAGE = 'mvn -q clean package -Dembedd-dependencies -Dmaven.repo.local=/tmp/.m2'
def MVN_COMMAND_DEPLOY = "mvn -q -Dembedd-dependencies -Dmaven.repo.local=/tmp/.m2 clean deploy "
pipeline {
    //When applied at the top-level of the pipeline block no global agent will be allocated for the entire Pipeline run and each stage section will need to contain its own agent section. For example: agent none
    agent none
    // agent any
    options {
        //https://plugins.jenkins.io/timestamper/
        timestamps()
        //https://plugins.jenkins.io/ansicolor/
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        //https://www.jenkins.io/blog/2018/02/22/cheetah/}
        //https://www.jenkins.io/doc/book/pipeline/scaling-pipeline/
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }
    stages {

        stage("build") {
            agent {
                kubernetes {
                    label 'mavenPod'
                    defaultContainer "maven"
                    yaml mavenPod
                }
            }
            steps {
                container("maven") {
                   // git url: 'https://github.com/pipeline-template-apps/maven-executable-jar-example.git', branch: 'master'
                   // sh "ls -l"
                    configFileProvider([configFile(fileId: 'global-maven-settings', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "${MVN_COMMAND_DEPLOY} -s ${MAVEN_SETTINGS_XML}"
                    }
                    stash includes: '**/*', name: 'app'

                }
            }
        }
        stage("Run parallel sequences") {
            parallel {
                stage("Test Firefox") {
                    agent {
                        kubernetes {
                            label 'mavenPodFireFox'
                            defaultContainer "maven"
                            yaml mavenPod
                        }
                    }
                    options {
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage("prepare test") {
                            steps {
                                sh "echo TODO test prepare FireFox...."
                                timeout(time: 3, unit: 'MINUTES') {
                                    retry(5) {
                                        //call external shell script
                                        sh "${testScript}"
                                    }
                                }
                            }
                        }
                        stage("run test") {
                            steps {
                                sh "echo TODO test FireFox"

                            }
                        }
                    }
                }

                stage("Test Chrome") {
                    agent {
                        kubernetes {
                            label 'mavenPodChrome'
                            defaultContainer "maven"
                            yaml mavenPod
                        }
                    }
                    options {
                        skipDefaultCheckout(true)
                    }
                    stages {
                        stage("prepare test") {
                            steps {
                                unstash 'app'
                                sh "echo TODO test prepare Chrome...."
                                timeout(time: 3, unit: 'MINUTES') {
                                    retry(5) {
                                        //call external shell script
                                        sh "${testScript}"
                                    }
                                }
                            }
                        }
                        stage("run test") {
                            steps {
                                sh "echo TODO test Chrome"
                            }
                        }
                    }
                }
            }
        }
        stage("QS Scan") {
            when { branch pattern: "feature-.*", comparator: "REGEXP" }
            agent {
                kubernetes {
                    label 'qsscan'
                    defaultContainer "maven"
                    yaml mavenPod
                }
            }
            options {
                skipDefaultCheckout(true)
            }
            steps {
                unstash 'app'
                sh "echo do QS Scans "
            }
            post {
                success {
                    echo "QS Scans Successfully"
                    //Slack notification ....
                    //Jira update
                }
                failure {
                    echo "QS Scans Successfully"
                    echo "QS Scan Failed"
                    //Slack notification....
                    //Jira update
                }
            }
        }
        stage("Docker") {
            when {
                branch 'master'
            }
            agent {
                kubernetes {
                    label 'dockerKaniko'
                    defaultContainer "kaniko"
                    yaml kanikoPod
                }
            }
            options {
                skipDefaultCheckout(true)
            }
            steps {
                sh "echo docker build"
                container(name: 'kaniko', shell: '/busybox/sh') {
                    sh 'ls -lR'
                    unstash 'app'
                    withEnv(['PATH+EXTRA=/busybox:/kaniko']) {
                        sh '''#!/busybox/sh
              /kaniko/executor  --dockerfile $(pwd)/Dockerfile --insecure --skip-tls-verify --cache=false  --context $(pwd) --destination caternberg/maven-executable-example:BUILD_NUMBER-${BUILD_NUMBER}
          '''
                    }
                }
            }
            post {
                success {
                    echo "Docker Build Successfully"
                    //Slack notification....
                    //Jira update
                }
                failure {
                    echo "Docker Build Failed"
                    //Slack notification....
                    //Jira update
                }
            }
        }
        //see https://medium.com/@peiruwang/build-ci-cd-multibranch-pipeline-with-jenkins-and-kubernetes-637de560d55a
        stage("Deploy to Staging") {
            when {
                branch 'staging'
            }
            steps {
                //https://github.com/jenkinsci/kubernetes-cli-plugin
               //  kubernetesDeploy kubeconfigId: 'kubeconfig-credentials-id', configs: 'YOUR_YAML_PATH/your_k8s_yaml', enableConfigSubstitution: true
                // REPLACE kubeconfigId
                sh "echo k8s deploy..."
            }
            post {
                success {
                    echo "Successfully deployed to Staging"
                }
                failure {
                    echo "Failed deploying to Staging"
                }
            }
        }
    }
}
